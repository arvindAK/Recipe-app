{"version":3,"sources":["logo.svg","components/Form.js","components/Recipes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Form","props","react_default","a","createElement","onSubmit","getRecipe","className","type","name","Recipes","console","log","recipes","length","data-ingredient","ingredient","map","recipe","key","recipe_id","src","image_url","alt","title","concat","publisher","target","href","source_url","API_KEY","App","state","undefined","_callee","e","recipeName","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","elements","value","fetch","sent","json","_this","setState","stop","this","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","stringify","setItem","components_Form","components_Recipes","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93408ec7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nconst Form = props => (\n  <form onSubmit={props.getRecipe}>\n    <input className=\"form__input\" type=\"text\" name=\"recipeName\" />\n    <button className=\"form__button\">Search</button>\n  </form>\n);\n\nexport default Form;\n","import React from \"react\";\n\n\nconst Recipes = (props) => (\n  <div className=\"container\">\n    { console.log(props) }\n    {\n      props.recipes &&\n      <p className=\"ingredient_container\">\n        Showing <span\n          className=\"recipe_num\">\n          { props.recipes.length }\n        </span> Recipes containing <span\n         className=\"ingredient\"\n         data-ingredient={props.ingredient}>\n       </span>\n      </p>\n    };\n    {\n      props.recipes &&\n      <div className=\"row\">\n        { props.recipes.map(recipe => {\n            return (\n              <div className=\"col-md-4\" key={ recipe.recipe_id }>\n                <div className=\"recipes__box\">\n                  <img\n                    className=\"recipe__box-img\"\n                    src={ recipe.image_url }\n                    alt={ recipe.title }\n                  />\n                  <div className=\"recipe__text\">\n                    <h5 className=\"recipes__title\">\n                      { recipe.title.length < 20 ? `${recipe.title}`\n                      : `${recipe.title}` }\n                    </h5>\n                    <p className=\"recipes__subtitle\">Publisher: <span>\n                        { recipe.publisher }\n                      </span>\n                    </p>\n                  </div>\n                    <a\n                      className=\"recipe_buttons\"\n                      target=\"_blank\"\n                      href={ recipe.source_url }\n                    >View Recipe</a>\n                </div>\n              </div>\n            );\n          })\n        }\n      </div>\n    }\n  </div>\n)\n\nexport default Recipes;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Form from \"./components/Form\"\nimport Recipes from \"./components/Recipes\"\n\nconst API_KEY = \"6877f4b9c87de4c5665431af1d52b9b3\";\n\nclass App extends Component {\n  state = {\n    recipes: [],\n    ingredient: undefined\n  }\n\n  getRecipe = async (e) => {\n    e.preventDefault();\n    const recipeName = e.target.elements.recipeName.value\n    const api_call = await fetch(`https://www.food2fork.com/api/search?key=${API_KEY}&q=${recipeName}`);\n    const data = await api_call.json();\n    this.setState({recipes: data.recipes, ingredient: recipeName});\n  }\n\n  componentDidMount = () => {\n    const json = localStorage.getItem('recipes');\n    const ingredient = localStorage.getItem('ingredient');\n    const recipes = JSON.parse(json);\n    this.setState({ recipes, ingredient })\n  }\n\n  componentDidUpdate = () => {\n    const recipes = JSON.stringify(this.state.recipes);\n    localStorage.setItem(\"recipes\", recipes);\n    localStorage.setItem(\"ingredient\", this.state.ingredient);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Recipe App</h1>\n        </header>\n        <Form getRecipe={this.getRecipe}/>\n        <Recipes\n          recipes={this.state.recipes}\n          ingredient={this.state.ingredient}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}