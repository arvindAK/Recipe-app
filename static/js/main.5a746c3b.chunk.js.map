{"version":3,"sources":["components/Form.js","components/Recipes.js","components/Footer.js","components/Limit.js","components/utils.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getRecipe","className","type","placeholder","name","Recipes","_ref","recipes","ingredient","length","map","recipe","key","recipe_id","src","image_url","alt","title","concat","publisher","target","rel","href","source_url","Footer","Limit","API_KEY","App","state","_callee","e","recipeName","url","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","elements","value","fetch","sent","json","undefined","_this","setState","stop","componentDidMount","localStorage","getItem","JSON","parse","then","result","componentDidUpdate","stringify","setItem","components_Form","this","Array","isArray","components_Recipes","components_Limit","components_Footer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a746c3b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Form = props => (\n  <form onSubmit={props.getRecipe}>\n    <input\n      className=\"form__input\"\n      type=\"text\"\n      placeholder=\"Ingredient\"\n      name=\"recipeName\"\n    />\n    <button className=\"form__button\">Search</button>\n  </form>\n);\n\nexport default Form;\n","import React from \"react\";\n// import Sort from \"./Sort\";\n// import Loading from \"./Loading\";\n\nconst Recipes = ({ recipes, ingredient }) => {\n  return (\n    <div className=\"container\">\n      <p className=\"ingredient_container\">\n        Showing <span className=\"recipe_num\">{recipes && recipes.length}</span>{\" \"}\n        Recipes\n        {ingredient.length > 0 && (\n          <span>\n            , Containing <span className=\"ingredient\">{ingredient}</span>\n          </span>\n        )}\n        {/* <span> sorted by</span> */}\n      </p>\n      {/* <Sort handleSort={handleSort} sort={sort} /> */}\n      {/* {loading ? (\n        <Loading />\n      ) : ( */}\n      <div className=\"row\">\n        {recipes &&\n          recipes.map(recipe => {\n            return (\n              <div className=\"col-md-4\" key={recipe.recipe_id}>\n                <div className=\"recipes__box\">\n                  <img\n                    className=\"recipe__box-img\"\n                    src={recipe.image_url}\n                    alt={recipe.title}\n                  />\n                  <div className=\"recipe__text\">\n                    <h5 className=\"recipes__title\">\n                      {recipe.title.length < 20\n                        ? `${recipe.title}`\n                        : `${recipe.title}`}\n                    </h5>\n                    <p className=\"recipes__subtitle\">\n                      Publisher: <span>{recipe.publisher}</span>\n                    </p>\n                  </div>\n                  <a\n                    className=\"recipe_buttons\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    href={recipe.source_url}\n                  >\n                    View Recipe\n                  </a>\n                </div>\n              </div>\n            );\n          })}\n      </div>\n      {/* )} */}\n    </div>\n  );\n};\n\nexport default Recipes;\n","import React from \"react\";\n\nconst Footer = () => (\n  <div className=\"footer\">\n    <span>\n      Recipes provided by{\" \"}\n      <a href=\"https://www.food2fork.com/about/api\">Food2Fork</a>\n    </span>\n  </div>\n);\n\nexport default Footer;\n","import React from \"react\";\n\nconst Limit = () => (\n  <div className=\"loading\">\n    <h2>API call limit reached for Food2Fork</h2>\n    <h3>Try again tomorrow...</h3>\n    <i className=\"fas fa-apple-alt fa-4x\" />\n    <i className=\"fas fa-apple-alt fa-4x\" />\n    <i className=\"fas fa-apple-alt fa-4x\" />\n    <i className=\"fas fa-apple-alt fa-4x\" />\n    <i className=\"fas fa-apple-alt fa-4x\" />\n  </div>\n);\n\nexport default Limit;\n","export const API_KEY = \"6877f4b9c87de4c5665431af1d52b9b3\";\n","import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\nimport Recipes from \"./components/Recipes\";\nimport Footer from \"./components/Footer\";\nimport Limit from \"./components/Limit\";\nimport { API_KEY } from \"./components/utils\";\n\nclass App extends React.Component {\n  state = {\n    recipes: [],\n    ingredient: \"\"\n  };\n\n  getRecipe = async e => {\n    e.preventDefault();\n    const recipeName = e.target.elements.recipeName.value;\n    let url = `https://www.food2fork.com/api/search?key=${API_KEY}&q=${recipeName}`;\n    const api_call = await fetch(url);\n    const data = await api_call.json();\n    const recipes = data.recipes === undefined ? [] : data.recipes;\n    this.setState({\n      recipes,\n      ingredient: recipeName\n    });\n  };\n\n  componentDidMount = () => {\n    const json = localStorage.getItem(\"recipes\");\n    const ingredient = localStorage.getItem(\"ingredient\");\n    if (json && json !== \"undefined\") {\n      const recipes = JSON.parse(json);\n      this.setState({ recipes, ingredient });\n    } else {\n      fetch(`https://www.food2fork.com/api/search?key=${API_KEY}`)\n        .then(result => result.json())\n        .then(data => {\n          const recipes = data.recipes === undefined ? [] : data.recipes;\n          this.setState({ recipes });\n        });\n    }\n  };\n\n  componentDidUpdate = () => {\n    const recipes = JSON.stringify(this.state.recipes);\n    localStorage.setItem(\"recipes\", recipes);\n    localStorage.setItem(\"ingredient\", this.state.ingredient);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Recipe App</h1>\n        </header>\n        <Form getRecipe={this.getRecipe} />\n        {!Array.isArray(this.state.recipes) || !this.state.recipes.length ? (\n          <Limit />\n        ) : (\n          <Recipes\n            recipes={this.state.recipes}\n            ingredient={this.state.ingredient}\n          />\n        )}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}